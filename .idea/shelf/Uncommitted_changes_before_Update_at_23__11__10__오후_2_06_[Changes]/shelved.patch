Index: README.md
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+># C\n\n[open tutorials](https://opentutorials.org/module/5371/30467)  \n\n## 1. C언어의 기초\n\n### 1-1. include와 헤더 파일\n\n헤더 파일이란 C언어의 함수, 변수, 매크로, 데이터 구조 등의 선언을 가지고 있는 파일이다. 이러한 선언들로 인해 컴파일러는 프로그램의 다른 부분에서 작성된 코드를 어떤 형식으로 사용하는지 알게 된다.\n\n    // 해더파일 삽입 방법\n    #include <stdio.h>\n    #include <stdlib.h>\n\n### 1-2. main 함수\n\nC언어로 작성된 프로그램은 main()함수부터 시작하게 된다. 만약 main()함수의 반환값을 정하지 않으면 무조건 0으로 반환된다.\n\n    #include <stdio.h>\n    #include <stdlib.h>\n\n    int main() {\n        // coding \n        return 0;\n    }\n\n### 1-3. 세미콜론과 주석 달기\n\n함수 안에서는 무조건 문장 하나가 끝날 때 세미콜론(;)을 붙여줘야 한다.(함수 바깥에서는 예외 존재) 그렇지 않으면 컴파일러가 컴파일 하지 못한다.  \n\n    // 한줄 전체 주석\n\n    /* 이 주석은 시작과 끝이 나타나 있어서 이 뒤에 코드를 작성 할수 있다. */ printf(\"hello world\")\n\n### 1-4. 변수\n\n    int a;                  // a는 정수형 변수이고, 값은 미정이다. \n    float f = 0.123456;     // f는 실수형 변수이고, 값은 0.123456이다.\n    char c = 'A';           // c는 문자형 변수이고, 값은 'A'이다.\n    char C = 65;            // C는 문자형 변수이고, 값은 'A'이다. (아스키코드 상의 값)\n    char s[6] = \"Korea\";    // s는 문자열이고, 값은 {K, o, r, e, a, NULL}이다. \n\n![img.png](img/img.png)\n\n### 1-5. 변수의 형태\n![img.png](img/img_0.png)\n\n- int: (-21억 ~ +21억)\n- unsigned int: (1 ~ 42억)\n- float: (-21억 ~ +21억, 소숫점 6자리 까지만)\n- char: (ASCII, 문자의 번호)\n- string: (문자열)\n\n### 1-6. 상수 #define\n\n    #define A 10    // 상수 A에 10 할당\n\n### 1-7. 알고 있으면 유용한 함수들\n\n    #include<math.h>\n\n    // 이 함수를 사용하기 위해서는 double로 cast 해줘야한다.\n    double var1 = abs(x);       // x의 절대값\n    double var2 = pow(x,y);     // x의 y제곱\n    double var3 = sqrt(x);      // 루트 x\n\n<br>\n<br>\n\n## 2. 입력과 출력\n\n### 2-1. 출력 함수 : printf\n\n    printf(\"hello world!\");\n\n### 2-2. 변환 문자와 기호 문자\n\n    printf(\"%d\", 134)       출력 >> 134\n    printf(\"%f\", 0.1)       출력 >> 0.100000\n    printf(\"%g\", 0.1)       출력 >> 0.1\n    printf(\"%c\", 'a')       출력 >> a\n    printf(\"%s\", \"hello\")   출력 >> hello\n    printf(\"5%%\");          출력 >> 5%\n\n![img.png](img/img_2.png)\n![img_1.png](img/img_3.png)\n\n### 2-3. 입력 함수 : scanf\n\n    int a, b;               // 정수타입의 a, b 선언\n    scanf(\"%d %d\", &a, &b); // scanf 함수로 a, b의 값을 사용자의 입력값으로 정한다.\n    printf(\"%d %d\", a, b);  // printf 함수로 a, b의 값을 출력한다.\n\n### 2-4. cast 연산자\ncast는 프로그래밍에서 데이터 타입을 다른 데이터 타입으로 변환하는 작업을 말한다.\n\n    int a = 65; \n    // 정수형이였던 a를 (char) cast연산자를 사용해서 문자형으로 변환\n    printf(\"%c\", (char)a);  출력 >> a\n\n<br>\n<br>\n\n## 3. 조건문\n\n### 3-1. 조건식\nC언어는 조건식이 참일 때는 1을 반환하고, 거짓일 때는 0을 반환한다. 다른 숫자들도 0만 아니면 참으로 인식한다.\n\n    int a=1, b=2;\n\n    a == b;     출력 >> 0 \n    a != b;     출력 >> 1\n    a > b;      출력 >> 0\n    a < b;      출력 >> 1\n    a >= b;     출력 >> 0\n    a <= b;     출력 >> 1\n\n    a == b && a <= b;   출력 >> 0\n    a == b || a <= b;   출력 >> 1\n    !a == b;            출력 >> 1\n\n### 3-2. 조건 연산자(삼항 연산자)\n\n    (조건식) ? 참일 때 반환값 : 거짓일 때 반환값;\n\n### 3-3. if문(조건문)\n\n    if (조건식1){\n        // 코드 블록 1\n    }\n    else if (조건식2){\n        // 코드 블록 2\n    }\n    else {\n        // 코드 블록 3\n    }\n    \n### 3-4. switch-case(정렬 조건문)\n\n    switch (조사할 변수) {   \n    case constant1:\n        // 코드 블록 1\n        break;          // break 쓰지 않으면 그 밑으로 쭉 내려가면서 실행된다.\n    case constant2:\n        // 코드 블록 2\n        break;\n    default:\n        // 만약 어떤 case에도 해당하지 않을 때 실행할 코드\n    }\n\n<br>\n<br>\n\n## 4. 반복문\n\n### 4-1. for : 횟수로 반복하는 방법\n\n    // 10번 반복하는 코드\n    for(int i = 0; i < 10; i++){\n        // 코드 블록\n    }\n\n### 4-2. while : 조건으로 반복하는 방법\n\n    // 조건식이 참인 경우 반복\n    while(조건식){\n        // 코드 블록\n    }\n\n### 4-3. do-while\n\n    // 일단 한 번 실행하고, 조건식이 참인 경우 반복 \n    do {\n        // 코드 블록\n    }while(조건식)\n\n### 4-4. break, continue\n\n    continue;   // 밑에 코드를 무시하고 다음 반복으로 넘어가기\n    break;      // 반복문 탈출하기\n\n### 4-5. 반복문의 활용\n\n#### EOF(End of File) 매크로 상수\nEOF는 파일의 끝을 나타내거나 입력 작업을 종료할 때 사용되는 매크로 상수이다. <stdio.h>에서 #define(상수)으로 EOF를 정의해놨다.  \nC언어에서는 -1로 표현되지만, 파일에서 데이터를 읽을 때, EOF가 나타나면 파일의 끝에 도달했음을 의미하고, 입력 중에는 사용자가(^Z)를 누르면 EOF로 받아들여 입력이 끝났음을 알릴 수 있다.\n\n    int a;\n    while(1){\n        scanf(\"%d\", &a);\n        \n        // EOF 입력이 들어오면 중지하는 조건문\n        if(a == EOF){\n            break;\n        }\n        else{\n            pritnf(\"%d\", a * 2);\n        }\n    }\n\n#### 유클리드 호제법\n유클리드 호제법은 두 수의 최대 공약수를 소인수분해 없이 구할 수 있는 방법이다.  \n- 두 수 중에서 큰 수를 a, 작은 수를 b라고 하고 a를 b로 나눈다.\n- a가 b로 나누어떨어지면, 두 수의 최대 공약수는 b이다.\n- a가 b로 나누어떨어지지 않으면, a를 b로 나눈 나머지와 b에 대해 1번부터 다시 반복한다.\n######\n    int a, b, c, d, e, gcd, lcm;\n\n    while (1)\n    {\n        scanf(\"%d %d\", &a, &b);\n\n        if(a == 0 || b == 0)\n        {\n            printf(\"END\");\n            return 0;\n        }\n        if(a > b)\n        {\n            c = a;\n            d = b;\n        }\n        else\n        {\n            c = b;\n            d = a;\n        }\n\n        while (1)\n        {\n            e = c % d;\n            if(e == 0)\n            {\n                gcd = d;\n                lcm = a * b / gcd;\n                printf(\"%d %d\\n\", gcd, lcm);\n                break;\n            }\n            c = d;\n            d = e;\n        }\n    }\n\n<br>\n<br>\n\n## 5. 배열\n\n### 5-1. 배열의 특징과 선언 방법\n\n    int a[10];          // 정수타입 10칸 짜리 배열 a 선언\n    a[0] = 1;           // 배열a의 0번 인덱스에 1 할당\n    int b[10] = {0, };  // d 배열의 값은 모두 0\n    int c[10] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10};    // 값 목록으로 생성하기\n    int d[] = {1, 2, 3, 4, 5};   // 배열의 크기를 명시하지 않고 값 목록으로 생성하면 값 목록 개수가 배열 크기가 됨\n\n    char s[6] = \"HELLO\";    // s는 문자열이고 값은 H, E, L, L, O, NULL   \n\n### 5-2. 다차원 배열\n\n    int a[3][4];    // 세로 3칸, 가로 4칸의 2차원 배열 선언\n    int b[2][3][4]; // 깊이 2칸, 세로3칸, 가로4칸 배열 선언\n\n### 5-3. 문자열 \n\n#### NULL\n문자열 함수 및 루프에서 문자열을 처리할 때 안정성을 보장하기 위해 문자열의 마지막에 NULL을 위치시킨다.   \n문자열의 끝을 알려지주 않으면 프로그램이 문자열의 끝을 어떻게 인식해야 하는지 알 수 없기 때문이다.\n\n    char c[6] = \"hello\";\n    int i;\n    for(i = 0; c[i] != NULL; i++){\n        printf(\"%c\", c[i]);\n    }\n\n#### gets, puts\n\n    char c[10];\n    char s[10];\n    \n    scanf(\"%s\", c); // 한줄에 다 입력해야 받아들일 수 있다.\n    fgets(s);       // 한줄에 다 입력하지 않아도 받아들일 수 있다.\n    puts(s);        // 문자열 출력 및 자동 개행\n\n#### #include <string.h>\n\n    #include <string.h>    \n\n    // 문자열 copy\n    strcpy(붙여넣기할 문자열, 복사할 문자열);\n\n    // 문자열 concat (NULL은 합쳐진 뒤 맨뒤에 하나만 생성)\n    strcat(앞의 문자열, 뒤에 붙일 문자열);\n\n    // 두 문자열 간의 대소문자 비교 (앞배열이크다면1, 같다면0, 같지않다면-1 반환)\n    strcmp(문자열1, 문자열2);\n\n    // 문자열 검색 (검색하는 문자열 찾으면 그 뒤로 쭉 반환)\n    strchr(문자열, '찾으려는 문자');\n\n    // 문자열 길이 (NULL 제외하고 문자열 길이 반환)\n    strlen(문자열);\n\n### 5-4. 배열의 활용편\n\n#### #include <time.h>\n    #include <stdio.h>\n    #include <stdlib.h>\n    #include <time.h>\n    \n    int main() {\n        // 현재 시간을 시드로 사용하여 초기화\n        srand(time(NULL));\n    \n        // 1에서 100까지의 난수 발생\n        int random_number = rand() % 100 + 1;\n    \n        printf(\"Random Number: %d\\n\", random_number);\n    \n        return 0;\n    }\n\n#### Select Sort\n\n<br>\n<br>\n\n## 6. 함수\n\n### 6-1. 나만의 함수 만들기\n\n    // 반환값이 없는 경우 함수형을 void로 한다.\n    void 1_plus_2(){\n        printf(\"%d\", 1+2);\n        return;\n    }\n\n    int main() {\n        1_plus_2();\n    }\n\n### 6-2. 선언과 정의\n\n    int add(int a, int b){\n        return a+b;\n    }\n\n    int main() {\n        add(1, 2);\n        return 0;\n    }\n\n위와 같이 선언과 정의가 동시에 되어 있으면 main함수를 보기 어려워진다. 따라서 위에서 함수를 선언만 해두고 함수는 밑에서 따로 정의하기도 한다.\n\n    int add(int a, intb);\n\n    int main() {\n        add(1, 2);\n        return 0;\n    }\n\n    int add(int a, int b) {\n        return a+b;\n    }\n\n\n### 6-3. 매개변수\n함수에 매개변수로 배열을 입력하는 경우 배열의 길이는 비워둔다. 단, 다차원 배열의 경우 첫번째 배열만 비워두고 2번째, 3번째 부분은 정확히 채워야한다.\n\n    int ArrSum(int array[]);\n    int ArrXArrSum(int array[][10]);\n\n### 6-4. 재귀함수\n\n#### 재귀함수의 특징과 선언 방법\n재귀 함수는 return을 활용해 처음으로 돌아가는 무한루프 함수이다. \n\n    // 팩토리얼\n    int factorial (int n) {\n        if (n == 1) return 1;\n        return n * factorial(n-1);\n    }\n\n### 6-6. 재귀함수의 활용\n\n#### 유클리드 호제법(2)\n\n    int gcd(int a, int b) {\n        if (b == 0) return a;\n        return gcd(b, a % b);\n    }\n\n\n#### 피보나치 수열\n![img_5.png](img/img_5.png)\n\n    int fibo(int n) {\n        if (n <= 2) return 1;\n        return fibo(b-1) + fibo(n-2);\n    }\n\n<br>\n<br>\n\n## 7. 포인터\n\n### 7-1. 포인터 변수와 주소값; 참조와 역참조\n\n    // 포인터 변수 선언\n    int *p;         // 아스터리스크(*)는 이 변수가 포인터라는 것을 의미한다. \n    \n    int a, *pa;     // 변수 a와 포인터 pa를 선언한다.\n    pa = &a;        // &기호는 '참조 연산자'(주소 연산자)이다. &a는 변수 a의 주소값을 의미한다.\n    *pa = 100;      // 이때의 아스터리스크(*)는 '역참조 연산자'이다. *pa는 pa가 가지고 있는 주소값에 *를 붙이게 되면 그 변수의 값의 값을 의미한다. \n    printf(\"%d\", a);    >> 100\n\n### 7-2. 포인터와 함수; Call by Reference\n\n    int add(int *x, int *y) {   // 매개 변수가 포인터가 되어 함수가 작동할 때 a,b의 실인수값이 바뀌게 된다.\n        *x += *y;\n        return *x;\n    }    \n\n    int main() {\n        int a = 5, b = 5;\n        printf(\"%d %d\", add(a, b), a);  >> 10 10\n    }\n\n### 7-3. 구조체 포인터; 포인터 연산자\n\n    typedef struct {\n        int rotation;\n        double r;\n    }circle;\n\n    int main() {\n        circle c = {10, 3};\n        circle *pc = c;\n        (*pc).rotation = 12;    // (*pc)는 *가 역참조 연산자임을 강조하기 위한 것\n        pc->rotation = 10;      // 화살표(->)는 위의 괄호를 쓰기 귀찮아서 만든 구조체 포인터 연산자\n    }\n\n<br>\n<br>\n\n## 8. 구조체\n\n#### 구조체의 뜻과 종류; struct와 typedef struct\n구조체는 직접 변수의 형태를 만들 수 있게 해준다. 구조체에는 struct와 typedef struct 2가지가 있다.\n\n    struct student_info{\n        int number;\n        char name[20];\n        int age;\n    }\n    \n    int main(){\n        struct student_info s = {1, \"Hong gill dong\". 12};\n        s.number = 10;  // s 구조체 안에 있는 number를 지칭하여 수정\n    }\n######\n    typedef struct {\n        int num;\n        char grade;\n    }student;       // typedef struct는 구조체 이름이 중괄호 뒤에 위치한다.\n\n    int main(){\n        student s = {1, 'A'};   // typedef struct는 변수 앞에 struct라고 명시하지 않아도 된다.(구조체 이름은 명시)\n    }\n\n#### 포인터 구조체\n포인터 구조체는 구조체 안에 퐁니터를 넣어서 만든 구조체이다.\n\n    typedef struct {\n        int *data;\n        Node *link; // 자기참조 구조체\n    }Node;\n\n    int main(){\n        Node list;\n        list.data = 123456789 * 63  // \n    }
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/README.md b/README.md
--- a/README.md	(revision d769b0de3272e5c251bb1f3a66bf4a2a74bf25e1)
+++ b/README.md	(date 1699592408781)
@@ -479,4 +479,5 @@
     int main(){
         Node list;
         list.data = 123456789 * 63  // 
-    }
\ No newline at end of file
+    }
+
Index: .idea/workspace.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<project version=\"4\">\n  <component name=\"AutoImportSettings\">\n    <option name=\"autoReloadType\" value=\"SELECTIVE\" />\n  </component>\n  <component name=\"ChangeListManager\">\n    <list default=\"true\" id=\"c1507f95-e11c-4197-aa94-4e7d93d86a2b\" name=\"Changes\" comment=\"\" />\n    <option name=\"SHOW_DIALOG\" value=\"false\" />\n    <option name=\"HIGHLIGHT_CONFLICTS\" value=\"true\" />\n    <option name=\"HIGHLIGHT_NON_ACTIVE_CHANGELIST\" value=\"false\" />\n    <option name=\"LAST_RESOLUTION\" value=\"IGNORE\" />\n  </component>\n  <component name=\"Git.Settings\">\n    <option name=\"RECENT_GIT_ROOT_PATH\" value=\"$PROJECT_DIR$\" />\n  </component>\n  <component name=\"MarkdownSettingsMigration\">\n    <option name=\"stateVersion\" value=\"1\" />\n  </component>\n  <component name=\"ProjectColorInfo\">{\n  &quot;associatedIndex&quot;: 6\n}</component>\n  <component name=\"ProjectId\" id=\"2XHGzrR7vNmKRoLpSNgypn5n5vz\" />\n  <component name=\"ProjectViewState\">\n    <option name=\"autoscrollFromSource\" value=\"true\" />\n    <option name=\"hideEmptyMiddlePackages\" value=\"true\" />\n    <option name=\"showLibraryContents\" value=\"true\" />\n  </component>\n  <component name=\"PropertiesComponent\"><![CDATA[{\n  \"keyToString\": {\n    \"RunOnceActivity.OpenProjectViewOnStart\": \"true\",\n    \"RunOnceActivity.ShowReadmeOnStart\": \"true\",\n    \"WebServerToolWindowFactoryState\": \"false\",\n    \"git-widget-placeholder\": \"Rebasing main\",\n    \"last_opened_file_path\": \"/home/choiyungyu/mygit/C\",\n    \"node.js.detected.package.eslint\": \"true\",\n    \"node.js.detected.package.tslint\": \"true\",\n    \"node.js.selected.package.eslint\": \"(autodetect)\",\n    \"node.js.selected.package.tslint\": \"(autodetect)\",\n    \"nodejs_package_manager_path\": \"npm\",\n    \"vue.rearranger.settings.migration\": \"true\"\n  }\n}]]></component>\n  <component name=\"RecentsManager\">\n    <key name=\"MoveFile.RECENT_KEYS\">\n      <recent name=\"$PROJECT_DIR$/img\" />\n    </key>\n  </component>\n  <component name=\"SpellCheckerSettings\" RuntimeDictionaries=\"0\" Folders=\"0\" CustomDictionaries=\"0\" DefaultDictionary=\"application-level\" UseSingleDictionary=\"true\" transferred=\"true\" />\n  <component name=\"TaskManager\">\n    <task active=\"true\" id=\"Default\" summary=\"Default task\">\n      <changelist id=\"c1507f95-e11c-4197-aa94-4e7d93d86a2b\" name=\"Changes\" comment=\"\" />\n      <created>1698278856293</created>\n      <option name=\"number\" value=\"Default\" />\n      <option name=\"presentableId\" value=\"Default\" />\n      <updated>1698278856293</updated>\n      <workItem from=\"1698278857301\" duration=\"329000\" />\n      <workItem from=\"1698621816774\" duration=\"2390000\" />\n    </task>\n    <servers />\n  </component>\n  <component name=\"TypeScriptGeneratedFilesManager\">\n    <option name=\"version\" value=\"3\" />\n  </component>\n</project>
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/.idea/workspace.xml b/.idea/workspace.xml
--- a/.idea/workspace.xml	(revision d769b0de3272e5c251bb1f3a66bf4a2a74bf25e1)
+++ b/.idea/workspace.xml	(date 1699592451377)
@@ -4,7 +4,10 @@
     <option name="autoReloadType" value="SELECTIVE" />
   </component>
   <component name="ChangeListManager">
-    <list default="true" id="c1507f95-e11c-4197-aa94-4e7d93d86a2b" name="Changes" comment="" />
+    <list default="true" id="c1507f95-e11c-4197-aa94-4e7d93d86a2b" name="Changes" comment="">
+      <change beforePath="$PROJECT_DIR$/.idea/workspace.xml" beforeDir="false" afterPath="$PROJECT_DIR$/.idea/workspace.xml" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/README.md" beforeDir="false" afterPath="$PROJECT_DIR$/README.md" afterDir="false" />
+    </list>
     <option name="SHOW_DIALOG" value="false" />
     <option name="HIGHLIGHT_CONFLICTS" value="true" />
     <option name="HIGHLIGHT_NON_ACTIVE_CHANGELIST" value="false" />
@@ -30,7 +33,7 @@
     "RunOnceActivity.OpenProjectViewOnStart": "true",
     "RunOnceActivity.ShowReadmeOnStart": "true",
     "WebServerToolWindowFactoryState": "false",
-    "git-widget-placeholder": "Rebasing main",
+    "git-widget-placeholder": "main",
     "last_opened_file_path": "/home/choiyungyu/mygit/C",
     "node.js.detected.package.eslint": "true",
     "node.js.detected.package.tslint": "true",
@@ -54,11 +57,23 @@
       <option name="presentableId" value="Default" />
       <updated>1698278856293</updated>
       <workItem from="1698278857301" duration="329000" />
-      <workItem from="1698621816774" duration="2390000" />
+      <workItem from="1698621816774" duration="2424000" />
+      <workItem from="1699592388020" duration="64000" />
     </task>
     <servers />
   </component>
   <component name="TypeScriptGeneratedFilesManager">
     <option name="version" value="3" />
   </component>
+  <component name="Vcs.Log.Tabs.Properties">
+    <option name="TAB_STATES">
+      <map>
+        <entry key="MAIN">
+          <value>
+            <State />
+          </value>
+        </entry>
+      </map>
+    </option>
+  </component>
 </project>
\ No newline at end of file
